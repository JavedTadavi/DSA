#include <iostream>
#include <vector>
using namespace std;

// Function to heapify a subtree rooted with node i which is an index in arr[]
void minHeapify(vector<int>& arr, int n, int i) {
    int smallest = i;  // Initialize smallest as root
    int left = 2 * i + 1;  // left child
    int right = 2 * i + 2;  // right child

    // If left child is smaller than root
    if (left < n && arr[left] < arr[smallest])
        smallest = left;

    // If right child is smaller than smallest so far
    if (right < n && arr[right] < arr[smallest])
        smallest = right;

    // If smallest is not root
    if (smallest != i) {
        swap(arr[i], arr[smallest]);

        // Recursively heapify the affected sub-tree
        minHeapify(arr, n, smallest);
    }
}

// Function to build a min heap from an array
void buildMinHeap(vector<int>& arr, int n) {
    // Start from the last non-leaf node and heapify all nodes in reverse order
    for (int i = n / 2 - 1; i >= 0; i--) {
        minHeapify(arr, n, i);
    }
}

// Function to print an array
void printArray(const vector<int>& arr) {
    for (int i = 0; i < arr.size(); ++i)
        cout << arr[i] << " ";
    cout << endl;
}

int main() {
    // Test with a random array using push_back() instead of list initialization
    vector<int> randomArray;
    randomArray.push_back(4);
    randomArray.push_back(10);
    randomArray.push_back(3);
    randomArray.push_back(5);
    randomArray.push_back(15);

    int n1 = randomArray.size();

    cout << "Original Random Array: ";
    printArray(randomArray);

    // Build heap
    buildMinHeap(randomArray, n1);

    cout << "Min Heap from Random Array: ";
    printArray(randomArray);
    cout << endl;

    // Test with a sorted array
    vector<int> sortedArray;
    sortedArray.push_back(8);
    sortedArray.push_back(6);
    sortedArray.push_back(5);
    sortedArray.push_back(4);
    sortedArray.push_back(2);

    int n2 = sortedArray.size();

    cout << "Original Sorted Array: ";
    printArray(sortedArray);

    // Build heap
    buildMinHeap(sortedArray, n2);

    cout << "Min Heap from Sorted Array: ";
    printArray(sortedArray);

    return 0;
}
