#include <iostream>
#include <climits>
using namespace std;

#define INF INT_MAX // Defining infinity as the maximum integer value

// Function to find the vertex with the minimum distance
int minDistance(int dist[], bool visited[], int V) {
    int min = INF, minIndex;

    for (int v = 0; v < V; v++) {
        if (!visited[v] && dist[v] <= min) {
            min = dist[v];
            minIndex = v;
        }
    }
    return minIndex;
}

// Function to implement Dijkstra's algorithm
void dijkstra(int graph[][9], int V, int src) {
    int dist[V];  // Array to store the shortest distance from src to each vertex
    bool visited[V];  // Array to track visited vertices

    // Initialize distances and visited status
    for (int i = 0; i < V; i++) {
        dist[i] = INF;
        visited[i] = false;
    }

    dist[src] = 0;  // Distance from source to itself is 0

    for (int count = 0; count < V - 1; count++) {
        // Get the vertex with the minimum distance from the source
        int u = minDistance(dist, visited, V);

        // Mark the selected vertex as visited
        visited[u] = true;

        // Update the distance of the adjacent vertices
        for (int v = 0; v < V; v++) {
            // Update dist[v] if there is a shorter path to v through u
            if (!visited[v] && graph[u][v] != 0 && dist[u] != INF && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    // Print the shortest distance from the source to all vertices
    cout << "Vertex \t Distance from Source\n";
    for (int i = 0; i < V; i++) {
        if (dist[i] == INF)
            cout << i << " \t INF\n";
        else
            cout << i << " \t " << dist[i] << endl;
    }
}

int main() {
    // Number of vertices in the graph
    int V = 9;

    // Adjacency matrix representation of the graph (weights of edges)
    int graph[9][9] = {
        {0, 6, 0, 0, 0, 0, 0, 8, 0},
        {6, 0, 8, 0, 0, 0, 0, 13, 0},
        {0, 8, 0, 7, 0, 6, 2, 0, 2},
        {0, 0, 7, 0, 9, 14, 0, 0, 0},
        {0, 0, 0, 9, 0, 10, 0, 0, 0},
        {0, 0, 6, 14, 10, 0, 2, 0, 0},
        {0, 0, 2, 0, 0, 2, 0, 1, 6},
        {8, 13, 0, 0, 0, 0, 1, 0, 7},
        {0, 0, 2, 0, 0, 0, 6, 7, 0}
    };

    // Run Dijkstra's algorithm from the source vertex 0
    dijkstra(graph, V, 0);

    return 0;
}
