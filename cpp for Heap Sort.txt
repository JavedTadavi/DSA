#include <iostream> 
using namespace std; 
 
// Function prototypes 
void heapify(int*, int, int); 
void heapsort(int*, int); 
void print_array(int*, int); 
 
int main() 
{ 
    int arr[] = {10, 3, 5, 16, 92, 12, 56, 43}; 
    int n = sizeof(arr) / sizeof(arr[0]); 
 
      cout << "\nArray before sorting:\n"; 
      print_array(arr, n); 
     
      heapsort(arr, n); 
     
      cout << "\n\nArray after sorting:\n"; 
      print_array(arr, n); 
 
      return 0; 
} 
 
/* Function to perform heapify on the subtree with root at index i */ 
void heapify(int* arr, int n, int i) 
{ 
    int largest = i; 
    int left = 2 * i + 1; 
    int right = 2 * i + 2; 
 
    // Check if the left child is larger than the root 
    if (left < n && arr[left] > arr[largest]) { 
        largest = left; 
    } 
 
    // Check if the right child is larger than the largest so far 
    if (right < n && arr[right] > arr[largest]) { 
        largest = right; 
    } 
 
    // If the largest is not the root, swap them and continue heapifying 
    if (largest != i) { 
        swap(arr[i], arr[largest]); 
        heapify(arr, n, largest); 
    } 
} 
 
/* Function to perform heapsort */ 
void heapsort(int* arr, int n) 
{ 
    // Build the max heap 
    for (int i = n / 2 - 1; i >= 0; i--) { 
        heapify(arr, n, i); 
    } 
 
    // One by one extract elements from the heap 
    for (int i = n - 1; i >= 0; i--) { 
        // Move the current root (largest) to the end 
        swap(arr[0], arr[i]); 
 
        // Call heapify on the reduced heap 
        heapify(arr, i, 0); 
    } 
} 
 
/* Function to print the array */ 
void print_array(int* arr, int n) 
{ 
    for (int i = 0; i < n; i++) { 
        cout << arr[i] << " "; 
    } 
    cout << endl; 
}


/*Output: 
 
int arr[] = {10, 3, 5, 16, 92, 12, 56, 43}; 
 
Array before sorting: 
10 3 5 16 92 12 56 43  
 
Array after sorting: 
3 5 10 12 16 43 56 92*/