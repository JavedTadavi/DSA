   #include <iostream> 
     #include <stack> 
#include <string> 
 
using namespace std; 
 
// Function to return precedence of operators 
int precedence(char op) { 
    if (op == '^') return 3; 
    if (op == '*' || op == '/') return 2; 
    if (op == '+' || op == '-') return 1; 
    return 0; 
} 
 
// Function to check if the character is an operator 
bool isOperator(char c) { 
    return (c == '+' || c == '-' || c == '*' || c == '/' || c == '^'); 
} 
 
// Function to convert infix expression to postfix 
string infixToPostfix(string infix) { 
    stack<char> s;  // Stack to hold operators and parentheses 
    string postfix; // Resulting postfix expression 
 
    for (int i = 0; i < infix.length(); i++) { 
        char ch = infix[i]; 
 
        // If the character is an operand (number or letter), add it to postfix 
        if (isalnum(ch)) { 
            postfix += ch; 
        } 
     
    // If the character is '(', push it to the stack 
       
  else if (ch == '(') { 
            s.push(ch); 
        } 
        // If the character is ')', pop from stack until '(' is found 
        else if (ch == ')') { 
            while (!s.empty() && s.top() != '(') { 
                postfix += s.top(); 
                s.pop(); 
            } 
            s.pop(); // Remove '(' from the stack 
        } 
        // If the character is an operator 
        else if (isOperator(ch)) { 
            while (!s.empty() && precedence(s.top()) >= precedence(ch)) { 
                postfix += s.top(); 
                s.pop(); 
            } 
            s.push(ch); 
        } 
    } 
 
    // Pop remaining operators from the stack 
    while (!s.empty()) { 
        postfix += s.top(); 
        s.pop(); 
    } 
 
    return postfix; 
} 
 
int main() { 
    string infix; 
 
    // Get user input for infix expression 
    cout << "Enter an infix expression: "; 
    cin >> infix; 
 
    // Convert infix to postfix 
    string postfix = infixToPostfix(infix); 
 
 
    
 // Output the postfix expression 
    cout << "Postfix Expression: " << postfix << endl; 
 
    return 0; 
}




/*Output: 
 
Enter an infix expression: +ABC 
 
Postfix Expression: ABC+*/