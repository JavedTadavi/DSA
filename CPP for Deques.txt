#include <iostream> 
#define SIZE 5 
 
using namespace std; 
 
int deque[SIZE]; 
int f = -1, r = -1; 
 
// insert_front function will insert the value from the front 
void insert_front(int x) { 
    if ((f == 0 && r == SIZE - 1) || (f == r + 1)) { 
        cout << "Overflow" << endl; 
    } else if (f == -1 && r == -1) { 
        f = r = 0; 
        deque[f] = x; 
    } else if (f == 0) { 
        f = SIZE - 1; 
        deque[f] = x; 
    } else { 
        f = f - 1; 
        deque[f] = x; 
    } 
} 
 
// insert_rear function will insert the value from the rear 
void insert_rear(int x) { 
    if ((f == 0 && r == SIZE - 1) || (f == r + 1)) { 
        cout << "Overflow" << endl; 
    } else if (f == -1 && r == -1) { 
        r = 0; 
        deque[r] = x; 
    } else if (r == SIZE - 1) { 
        r = 0; 
        deque[r] = x; 
   
  } else { 
        r++; 
        deque[r] = x; 
    } 
} 
 
// display function prints all the values of deque 
void display() { 
    if (f == -1 && r == -1) { 
        cout << "Deque is empty" << endl; 
        return; 
    } 
 
    int i = f; 
    cout << "Elements in deque are: "; 
    while (i != r) { 
        cout << deque[i] << " "; 
        i = (i + 1) % SIZE; 
    } 
    cout << deque[r] << endl; 
} 
 
// getfront function retrieves the first value of the deque 
void getfront() { 
    if (f == -1 && r == -1) { 
        cout << "Deque is empty" << endl; 
    } else { 
        cout << "The value at the front is: " << deque[f] << endl; 
    } 
} 
 
// getrear function retrieves the last value of the deque 
void getrear() { 
    if (f == -1 && r == -1) { 
        cout << "Deque is empty" << endl; 
    } else { 
        cout << "The value at the rear is: " << deque[r] << endl; 
    } 
} 
 
// delete_front() function deletes the element from the front 
void delete_front() { 
    if (f == -1 && r == -1) { 
        cout << "Deque is empty" << endl; 
     
} else if (f == r) { 
        cout << "The deleted element is: " << deque[f] << endl; 
        f = r = -1; 
    } else if (f == SIZE - 1) { 
        cout << "The deleted element is: " << deque[f] << endl; 
        f = 0; 
    } else { 
        cout << "The deleted element is: " << deque[f] << endl; 
        f = f + 1; 
    } 
} 
 
// delete_rear() function deletes the element from the rear 
void delete_rear() { 
    if (f == -1 && r == -1) { 
        cout << "Deque is empty" << endl; 
    } else if (f == r) { 
        cout << "The deleted element is: " << deque[r] << endl; 
        f = r = -1; 
    } else if (r == 0) { 
        cout << "The deleted element is: " << deque[r] << endl; 
        r = SIZE - 1; 
    } else { 
        cout << "The deleted element is: " << deque[r] << endl; 
        r = r - 1; 
    } 
} 
 
int main() { 
    insert_front(20); 
    insert_front(10); 
    insert_rear(30); 
    insert_rear(50); 
    insert_rear(80); 
 
    display(); // Display the values of deque 
    getfront(); // Retrieve the value at front-end 
    getrear();  // Retrieve the value at rear-end 
    delete_front(); 
    delete_rear(); 
    display(); // Display the values after deletion 
 
    return 0; 
}




/*Output: 
 
Elements in deque are: 10 20 30 50 80 
The value at the front is: 10 
The value at the rear is: 80 
The deleted element is: 10 
The deleted element is: 80 
Elements in deque are: 20 30 50 */
