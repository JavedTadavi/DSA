#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Edge structure to represent an edge
struct Edge {
    int u, v, weight;
};

// Disjoint Set Union (DSU) or Union-Find structure
class DSU {
public:
    vector<int> parent, rank;

    DSU(int n) {
        parent.resize(n);
        rank.resize(n, 0);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }

    // Find the parent of a node with path compression
    int find(int u) {
        if (u != parent[u]) {
            parent[u] = find(parent[u]);  // Path compression
        }
        return parent[u];
    }

    // Union by rank
    void unionSet(int u, int v) {
        int rootU = find(u);
        int rootV = find(v);

        if (rootU != rootV) {
            // Union by rank (attach the smaller tree under the larger one)
            if (rank[rootU] > rank[rootV]) {
                parent[rootV] = rootU;
            } else if (rank[rootU] < rank[rootV]) {
                parent[rootU] = rootV;
            } else {
                parent[rootV] = rootU;
                rank[rootU]++;
            }
        }
    }
};

// Comparator function to compare edges by their weight
bool compareEdges(Edge a, Edge b) {
    return a.weight < b.weight;
}

// Function to implement Kruskal's algorithm
int kruskal(vector<Edge>& edges, int n) {
    // Sort edges by their weights in non-decreasing order using custom comparator
    sort(edges.begin(), edges.end(), compareEdges);

    DSU dsu(n);  // Initialize DSU for n vertices
    int mstWeight = 0;  // Total weight of the MST
    vector<Edge> mstEdges;  // To store the edges of the MST

    // Go through the sorted edges and add them to the MST if no cycle is formed
    for (int i = 0; i < edges.size(); i++) {
        Edge& edge = edges[i];
        int u = edge.u;
        int v = edge.v;
        int weight = edge.weight;

        // If u and v are in different sets, add this edge to the MST
        if (dsu.find(u) != dsu.find(v)) {
            dsu.unionSet(u, v);
            mstEdges.push_back(edge);
            mstWeight += weight;
        }
    }

    // Print the MST edges and total weight
    cout << "\nEdges in the Minimum Spanning Tree (MST):\n";
    for (int i = 0; i < mstEdges.size(); i++) {
        Edge& edge = mstEdges[i];
        cout << edge.u << " - " << edge.v << " : " << edge.weight << endl;
    }

    return mstWeight;
}

int main() {
    int n, e;

    // Input the number of vertices and edges
    cout << "Enter the number of vertices: ";
    cin >> n;
    cout << "Enter the number of edges: ";
    cin >> e;

    vector<Edge> edges(e);

    // Input the edges (u, v, weight)
    cout << "Enter the edges (u, v, weight):\n";
    for (int i = 0; i < e; i++) {
        cin >> edges[i].u >> edges[i].v >> edges[i].weight;
    }

    // Call Kruskal's algorithm to find the MST
    int mstWeight = kruskal(edges, n);

    // Print the total weight of the MST
    cout << "\nTotal weight of the Minimum Spanning Tree: " << mstWeight << endl;

    return 0;
}




/*Output: 
Enter the number of vertices: 4 
Enter the number of edges: 5 
Enter the edges (u, v, weight): 
0 1 10 
0 2 6 
0 3 5 
1 3 15 
2 3 4 
Edges in the Minimum Spanning Tree (MST): 
3 - 2 : 4 
0 - 3 : 5 
0 - 1 : 10 
 
Total weight of the Minimum Spanning Tree: 19*/